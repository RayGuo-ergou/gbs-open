// src/redis/schema.ts
import { z } from "zod";
var zRawRaidTweetMini = z.object({
  n: z.string(),
  // name
  sn: z.string(),
  // screen_name
  en: z.string(),
  // enemy_name
  ui: z.number(),
  // user_id
  ti: z.number(),
  // tweet_id
  bi: z.string(),
  // battle_id
  lv: z.string(),
  // level
  l: z.enum(["en", "ja"]),
  // language
  t: z.number(),
  // time
  c: z.string().optional()
  // comment
});
var zRaidTweetMini = z.object({
  n: z.string(),
  // name
  sn: z.string(),
  // screen_name
  ui: z.number(),
  // user_id
  ti: z.number(),
  // tweet_id
  bi: z.string(),
  // battle_id
  ei: z.number(),
  // enemy_id(-1はリスト外)
  lv: z.string().optional(),
  // level
  en: z.string().optional(),
  // enemy_name
  l: z.enum(["en", "ja"]),
  // language
  t: z.number(),
  // time
  ft: z.number(),
  // first time(初回投稿時間)
  c: z.string().optional()
  // comment
});

// src/gbsList.ts
import axios from "axios";
import { z as z2 } from "zod";
var gbsList = [];
async function initGbsList(url) {
  const { data } = await axios.get(url);
  gbsList = zGbsList.parse(data);
}
function getEnemyId(name, level) {
  const enemy = gbsList.find((item) => {
    return (item.en === name || item.ja === name) && item.level === level;
  });
  return enemy?.id ?? -1;
}
var EnemyElement = {
  None: 0,
  Fire: 1,
  Water: 2,
  Earch: 3,
  Wind: 4,
  Light: 5,
  Dark: 6
};
var zGbsListItem = z2.object({
  id: z2.number(),
  attr: z2.nativeEnum(EnemyElement),
  ja: z2.string(),
  en: z2.string(),
  image: z2.string().nullable(),
  level: z2.string(),
  tags: z2.array(z2.string())
});
var zGbsList = z2.array(zGbsListItem);

// src/utils/index.ts
var utils_default = {};
export {
  EnemyElement,
  utils_default as default,
  gbsList,
  getEnemyId,
  initGbsList,
  zGbsList,
  zGbsListItem,
  zRaidTweetMini
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsiLi4vc3JjL3JlZGlzL3NjaGVtYS50cyIsICIuLi9zcmMvZ2JzTGlzdC50cyIsICIuLi9zcmMvdXRpbHMvaW5kZXgudHMiXSwKICAic291cmNlc0NvbnRlbnQiOiBbImltcG9ydCB7IFJhd1JhaWRUd2VldCB9IGZyb20gJ0AvdHdlZXQvcmVjZWl2ZXInO1xyXG5pbXBvcnQgeyB6IH0gZnJvbSAnem9kJztcclxuXHJcbi8qKlxyXG4gKiBSZWRpc1x1OTAwMVx1NEZFMVx1NzUyOFx1MzA2RVx1NjU4N1x1NUI1N1x1NjU3MFx1MzA5Mlx1NjI5MVx1MzA0OFx1MzA1RlJhaWRUd2VldFxyXG4gKi9cclxuZXhwb3J0IGNvbnN0IHpSYXdSYWlkVHdlZXRNaW5pID0gei5vYmplY3Qoe1xyXG4gIG46IHouc3RyaW5nKCksIC8vIG5hbWVcclxuICBzbjogei5zdHJpbmcoKSwgLy8gc2NyZWVuX25hbWVcclxuICBlbjogei5zdHJpbmcoKSwgLy8gZW5lbXlfbmFtZVxyXG4gIHVpOiB6Lm51bWJlcigpLCAvLyB1c2VyX2lkXHJcbiAgdGk6IHoubnVtYmVyKCksIC8vIHR3ZWV0X2lkXHJcbiAgYmk6IHouc3RyaW5nKCksIC8vIGJhdHRsZV9pZFxyXG4gIGx2OiB6LnN0cmluZygpLCAvLyBsZXZlbFxyXG4gIGw6IHouZW51bShbJ2VuJywgJ2phJ10pLCAvLyBsYW5ndWFnZVxyXG4gIHQ6IHoubnVtYmVyKCksIC8vIHRpbWVcclxuICBjOiB6LnN0cmluZygpLm9wdGlvbmFsKCksIC8vIGNvbW1lbnRcclxufSk7XHJcbmV4cG9ydCB0eXBlIFJhd1JhaWRUd2VldE1pbmkgPSB6LmluZmVyPHR5cGVvZiB6UmF3UmFpZFR3ZWV0TWluaT47XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gbWluaWZ5UmF3UmFpZFR3ZWV0KHR3ZWV0OiBSYXdSYWlkVHdlZXQpOiBSYXdSYWlkVHdlZXRNaW5pIHtcclxuICByZXR1cm4ge1xyXG4gICAgbjogdHdlZXQubmFtZSxcclxuICAgIHNuOiB0d2VldC5zY3JlZW5fbmFtZSxcclxuICAgIGVuOiB0d2VldC5lbmVteV9uYW1lLFxyXG4gICAgdWk6IHR3ZWV0LnVzZXJfaWQsXHJcbiAgICB0aTogdHdlZXQudHdlZXRfaWQsXHJcbiAgICBiaTogdHdlZXQuYmF0dGxlX2lkLFxyXG4gICAgbHY6IHR3ZWV0LmxldmVsLFxyXG4gICAgbDogdHdlZXQubGFuZ3VhZ2UsXHJcbiAgICB0OiB0d2VldC50aW1lLFxyXG4gICAgYzogdHdlZXQuY29tbWVudCxcclxuICB9O1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gdW5wYWNrUmF3UmFpZFR3ZWV0TWluaShtaW5pOiBSYXdSYWlkVHdlZXRNaW5pKTogUmF3UmFpZFR3ZWV0IHtcclxuICByZXR1cm4ge1xyXG4gICAgbmFtZTogbWluaS5uLFxyXG4gICAgc2NyZWVuX25hbWU6IG1pbmkuc24sXHJcbiAgICBlbmVteV9uYW1lOiBtaW5pLmVuLFxyXG4gICAgdXNlcl9pZDogbWluaS51aSxcclxuICAgIHR3ZWV0X2lkOiBtaW5pLnRpLFxyXG4gICAgYmF0dGxlX2lkOiBtaW5pLmJpLFxyXG4gICAgbGV2ZWw6IG1pbmkubHYsXHJcbiAgICBsYW5ndWFnZTogbWluaS5sLFxyXG4gICAgdGltZTogbWluaS50LFxyXG4gICAgY29tbWVudDogbWluaS5jLFxyXG4gIH07XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBcdTVCOUZcdTk2OUJcdTMwNkJcdTkxNERcdTRGRTFcdTMwNTVcdTMwOENcdTMwOEJcdTMwQzRcdTMwQTRcdTMwRkNcdTMwQzhcdTMwQzdcdTMwRkNcdTMwQkZcclxuICovXHJcbmV4cG9ydCBjb25zdCB6UmFpZFR3ZWV0TWluaSA9IHoub2JqZWN0KHtcclxuICBuOiB6LnN0cmluZygpLCAvLyBuYW1lXHJcbiAgc246IHouc3RyaW5nKCksIC8vIHNjcmVlbl9uYW1lXHJcbiAgdWk6IHoubnVtYmVyKCksIC8vIHVzZXJfaWRcclxuICB0aTogei5udW1iZXIoKSwgLy8gdHdlZXRfaWRcclxuICBiaTogei5zdHJpbmcoKSwgLy8gYmF0dGxlX2lkXHJcbiAgZWk6IHoubnVtYmVyKCksIC8vIGVuZW15X2lkKC0xXHUzMDZGXHUzMEVBXHUzMEI5XHUzMEM4XHU1OTE2KVxyXG4gIGx2OiB6LnN0cmluZygpLm9wdGlvbmFsKCksIC8vIGxldmVsXHJcbiAgZW46IHouc3RyaW5nKCkub3B0aW9uYWwoKSwgLy8gZW5lbXlfbmFtZVxyXG4gIGw6IHouZW51bShbJ2VuJywgJ2phJ10pLCAvLyBsYW5ndWFnZVxyXG4gIHQ6IHoubnVtYmVyKCksIC8vIHRpbWVcclxuICBmdDogei5udW1iZXIoKSwgLy8gZmlyc3QgdGltZShcdTUyMURcdTU2REVcdTYyOTVcdTdBM0ZcdTY2NDJcdTk1OTMpXHJcbiAgYzogei5zdHJpbmcoKS5vcHRpb25hbCgpLCAvLyBjb21tZW50XHJcbn0pO1xyXG5leHBvcnQgdHlwZSBSYWlkVHdlZXRNaW5pID0gei5pbmZlcjx0eXBlb2YgelJhaWRUd2VldE1pbmk+O1xyXG4iLCAiaW1wb3J0IGF4aW9zIGZyb20gJ2F4aW9zJztcclxuaW1wb3J0IHsgeiB9IGZyb20gJ3pvZCc7XHJcblxyXG5leHBvcnQgbGV0IGdic0xpc3Q6IEdic0xpc3QgPSBbXTtcclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBpbml0R2JzTGlzdCh1cmw6IHN0cmluZykge1xyXG4gIGNvbnN0IHsgZGF0YSB9ID0gYXdhaXQgYXhpb3MuZ2V0KHVybCk7XHJcbiAgZ2JzTGlzdCA9IHpHYnNMaXN0LnBhcnNlKGRhdGEpO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gZ2V0RW5lbXlJZChuYW1lOiBzdHJpbmcsIGxldmVsOiBzdHJpbmcpIHtcclxuICBjb25zdCBlbmVteSA9IGdic0xpc3QuZmluZCgoaXRlbSkgPT4ge1xyXG4gICAgcmV0dXJuIChpdGVtLmVuID09PSBuYW1lIHx8IGl0ZW0uamEgPT09IG5hbWUpICYmIGl0ZW0ubGV2ZWwgPT09IGxldmVsO1xyXG4gIH0pO1xyXG4gIHJldHVybiBlbmVteT8uaWQgPz8gLTE7XHJcbn1cclxuXHJcbmV4cG9ydCBjb25zdCBFbmVteUVsZW1lbnQgPSB7XHJcbiAgTm9uZTogMCxcclxuICBGaXJlOiAxLFxyXG4gIFdhdGVyOiAyLFxyXG4gIEVhcmNoOiAzLFxyXG4gIFdpbmQ6IDQsXHJcbiAgTGlnaHQ6IDUsXHJcbiAgRGFyazogNixcclxufSBhcyBjb25zdDtcclxuXHJcbmV4cG9ydCBjb25zdCB6R2JzTGlzdEl0ZW0gPSB6Lm9iamVjdCh7XHJcbiAgaWQ6IHoubnVtYmVyKCksXHJcbiAgYXR0cjogei5uYXRpdmVFbnVtKEVuZW15RWxlbWVudCksXHJcbiAgamE6IHouc3RyaW5nKCksXHJcbiAgZW46IHouc3RyaW5nKCksXHJcbiAgaW1hZ2U6IHouc3RyaW5nKCkubnVsbGFibGUoKSxcclxuICBsZXZlbDogei5zdHJpbmcoKSxcclxuICB0YWdzOiB6LmFycmF5KHouc3RyaW5nKCkpLFxyXG59KTtcclxuZXhwb3J0IHR5cGUgR2JzTGlzdEl0ZW0gPSB6LmluZmVyPHR5cGVvZiB6R2JzTGlzdEl0ZW0+O1xyXG5cclxuZXhwb3J0IGNvbnN0IHpHYnNMaXN0ID0gei5hcnJheSh6R2JzTGlzdEl0ZW0pO1xyXG5leHBvcnQgdHlwZSBHYnNMaXN0ID0gei5pbmZlcjx0eXBlb2Ygekdic0xpc3Q+O1xyXG4iLCAiLy8gXHU1OTE2XHU5MEU4XHU1NDExXHUzMDUxXHUzMDZFZXhwb3J0KFx1NEUzQlx1MzA2Qlx1NTc4QilcclxuXHJcbmV4cG9ydCB7IFJhaWRUd2VldE1pbmkgfSBmcm9tICdAL3JlZGlzL3NjaGVtYSc7XHJcbmV4cG9ydCB7IHpSYWlkVHdlZXRNaW5pIH0gZnJvbSAnQC9yZWRpcy9zY2hlbWEnO1xyXG5leHBvcnQgKiBmcm9tICdAL2dic0xpc3QnO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQge307XHJcbiJdLAogICJtYXBwaW5ncyI6ICI7QUFDQSxTQUFTLFNBQVM7QUFLWCxJQUFNLG9CQUFvQixFQUFFLE9BQU87QUFBQSxFQUN4QyxHQUFHLEVBQUUsT0FBTztBQUFBO0FB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