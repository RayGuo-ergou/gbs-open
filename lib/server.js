"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/utils/server.ts
var server_exports = {};
__export(server_exports, {
  env: () => env,
  getRaidTweetChClient: () => getRaidTweetChClient,
  getRawChClient: () => getRawChClient,
  minifyRawRaidTweet: () => minifyRawRaidTweet,
  redisOps: () => redisOps,
  sendRaidTweet: () => sendRaidTweet,
  sendRawRaidTweet: () => sendRawRaidTweet,
  unpackRawRaidTweetMini: () => unpackRawRaidTweetMini,
  zConfig: () => zConfig,
  zRaidTweetMini: () => zRaidTweetMini,
  zRawRaidTweetMini: () => zRawRaidTweetMini
});
module.exports = __toCommonJS(server_exports);

// src/config.ts
var import_zod = require("zod");
var dotenv = __toESM(require("dotenv"));
dotenv.config();
var zConfig = import_zod.z.object({
  OAUTH_CALLBACK: import_zod.z.string().url(),
  // CLIENT_ID: z.string(),
  // CLIENT_SECRET: z.string(),
  CONSUMER_KEY: import_zod.z.string(),
  CONSUMER_SECRET: import_zod.z.string(),
  PORT: import_zod.z.string(),
  CACHE_PORT: import_zod.z.string(),
  STREAM_PORT: import_zod.z.string(),
  GBS_LIST: import_zod.z.string().url(),
  REDIS_HOST: import_zod.z.string(),
  REDIS_PORT: import_zod.z.string(),
  REDIS_PASS: import_zod.z.string()
});
var env = zConfig.parse(process.env);

// src/redis/index.ts
var import_ioredis = __toESM(require("ioredis"));

// src/redis/schema.ts
var import_zod2 = require("zod");
var zRawRaidTweetMini = import_zod2.z.object({
  n: import_zod2.z.string(),
  // name
  sn: import_zod2.z.string(),
  // screen_name
  en: import_zod2.z.string(),
  // enemy_name
  ui: import_zod2.z.number(),
  // user_id
  ti: import_zod2.z.number(),
  // tweet_id
  bi: import_zod2.z.string(),
  // battle_id
  lv: import_zod2.z.string(),
  // level
  l: import_zod2.z.enum(["en", "ja"]),
  // language
  t: import_zod2.z.number(),
  // time
  c: import_zod2.z.string().optional()
  // comment
});
function minifyRawRaidTweet(tweet) {
  return {
    n: tweet.name,
    sn: tweet.screen_name,
    en: tweet.enemy_name,
    ui: tweet.user_id,
    ti: tweet.tweet_id,
    bi: tweet.battle_id,
    lv: tweet.level,
    l: tweet.language,
    t: tweet.time,
    c: tweet.comment
  };
}
function unpackRawRaidTweetMini(mini) {
  return {
    name: mini.n,
    screen_name: mini.sn,
    enemy_name: mini.en,
    user_id: mini.ui,
    tweet_id: mini.ti,
    battle_id: mini.bi,
    level: mini.lv,
    language: mini.l,
    time: mini.t,
    comment: mini.c
  };
}
var zRaidTweetMini = import_zod2.z.object({
  n: import_zod2.z.string(),
  // name
  sn: import_zod2.z.string(),
  // screen_name
  ui: import_zod2.z.number(),
  // user_id
  ti: import_zod2.z.number(),
  // tweet_id
  bi: import_zod2.z.string(),
  // battle_id
  ei: import_zod2.z.number(),
  // enemy_id(-1はリスト外)
  lv: import_zod2.z.string().optional(),
  // level
  en: import_zod2.z.string().optional(),
  // enemy_name
  l: import_zod2.z.enum(["en", "ja"]),
  // language
  t: import_zod2.z.number(),
  // time
  ft: import_zod2.z.number(),
  // first time(初回投稿時間)
  c: import_zod2.z.string().optional()
  // comment
});

// src/redis/index.ts
var import_mitt = __toESM(require("mitt"));
var redisOps = {
  host: env.REDIS_HOST,
  password: env.REDIS_PASS,
  port: Number.parseInt(env.REDIS_PORT)
};
function getRawChClient() {
  const receiver = (0, import_mitt.default)();
  const subRedis = new import_ioredis.default(redisOps);
  subRedis.subscribe("gbs-open-raw");
  subRedis.on("message", (ch, json) => {
    try {
      const mini = zRawRaidTweetMini.parse(JSON.parse(json));
      receiver.emit("tweet", mini);
    } catch {
    }
  });
  return receiver;
}
function getRaidTweetChClient() {
  const receiver = (0, import_mitt.default)();
  const subRedis = new import_ioredis.default(redisOps);
  subRedis.subscribe("gbs-open-tweet");
  subRedis.on("message", (ch, json) => {
    try {
      const mini = zRaidTweetMini.parse(JSON.parse(json));
      receiver.emit("tweet", mini);
    } catch {
    }
  });
  return receiver;
}
var pubRedis = new import_ioredis.default(redisOps);
function sendRawRaidTweet(tweet) {
  const mini = minifyRawRaidTweet(tweet);
  const json = JSON.stringify(mini);
  pubRedis.publish("gbs-open-raw", json);
}
function sendRaidTweet(tweet) {
  const json = JSON.stringify(tweet);
  pubRedis.publish("gbs-open-tweet", json);
}

// src/tweet/receiver.ts
var import_mitt2 = __toESM(require("mitt"));
var import_gbf_tweet_parser = require("@totoraj930/gbf-tweet-parser");
var import_twitter_api_v2 = require("twitter-api-v2");

// src/db.ts
var import_client = require("@prisma/client");
var import_uuid = require("uuid");
var prisma = new import_client.PrismaClient();

// src/tweet/receiver.ts
var tweetReceiver = (0, import_mitt2.default)();
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  env,
  getRaidTweetChClient,
  getRawChClient,
  minifyRawRaidTweet,
  redisOps,
  sendRaidTweet,
  sendRawRaidTweet,
  unpackRawRaidTweetMini,
  zConfig,
  zRaidTweetMini,
  zRawRaidTweetMini
});
//# sourceMappingURL=data:application/json;base64,